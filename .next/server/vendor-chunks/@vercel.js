"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@vercel";
exports.ids = ["vendor-chunks/@vercel"];
exports.modules = {

/***/ "(rsc)/./node_modules/@vercel/blob/dist/chunk-QRRHJ574.js":
/*!**********************************************************!*\
  !*** ./node_modules/@vercel/blob/dist/chunk-QRRHJ574.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BlobAccessError: () => (/* binding */ BlobAccessError),\n/* harmony export */   BlobError: () => (/* binding */ BlobError),\n/* harmony export */   BlobNotFoundError: () => (/* binding */ BlobNotFoundError),\n/* harmony export */   BlobRequestAbortedError: () => (/* binding */ BlobRequestAbortedError),\n/* harmony export */   BlobServiceNotAvailable: () => (/* binding */ BlobServiceNotAvailable),\n/* harmony export */   BlobServiceRateLimited: () => (/* binding */ BlobServiceRateLimited),\n/* harmony export */   BlobStoreNotFoundError: () => (/* binding */ BlobStoreNotFoundError),\n/* harmony export */   BlobStoreSuspendedError: () => (/* binding */ BlobStoreSuspendedError),\n/* harmony export */   BlobUnknownError: () => (/* binding */ BlobUnknownError),\n/* harmony export */   createCompleteMultipartUploadMethod: () => (/* binding */ createCompleteMultipartUploadMethod),\n/* harmony export */   createCreateMultipartUploadMethod: () => (/* binding */ createCreateMultipartUploadMethod),\n/* harmony export */   createCreateMultipartUploaderMethod: () => (/* binding */ createCreateMultipartUploaderMethod),\n/* harmony export */   createPutMethod: () => (/* binding */ createPutMethod),\n/* harmony export */   createUploadPartMethod: () => (/* binding */ createUploadPartMethod),\n/* harmony export */   getDownloadUrl: () => (/* binding */ getDownloadUrl),\n/* harmony export */   getTokenFromOptionsOrEnv: () => (/* binding */ getTokenFromOptionsOrEnv),\n/* harmony export */   requestApi: () => (/* binding */ requestApi)\n/* harmony export */ });\n/* harmony import */ var undici__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! undici */ \"undici\");\n/* harmony import */ var async_retry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! async-retry */ \"(rsc)/./node_modules/async-retry/lib/index.js\");\n/* harmony import */ var bytes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bytes */ \"(rsc)/./node_modules/bytes/index.js\");\n/* harmony import */ var is_plain_object__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! is-plain-object */ \"(rsc)/./node_modules/is-plain-object/dist/is-plain-object.mjs\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var is_buffer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! is-buffer */ \"(rsc)/./node_modules/is-buffer/index.js\");\n// src/helpers.ts\nfunction getTokenFromOptionsOrEnv(options) {\n  if (options == null ? void 0 : options.token) {\n    return options.token;\n  }\n  if (process.env.BLOB_READ_WRITE_TOKEN) {\n    return process.env.BLOB_READ_WRITE_TOKEN;\n  }\n  throw new BlobError(\n    \"No token found. Either configure the `BLOB_READ_WRITE_TOKEN` environment variable, or pass a `token` option to your calls.\"\n  );\n}\nvar BlobError = class extends Error {\n  constructor(message) {\n    super(`Vercel Blob: ${message}`);\n  }\n};\nfunction getDownloadUrl(blobUrl) {\n  const url = new URL(blobUrl);\n  url.searchParams.set(\"download\", \"1\");\n  return url.toString();\n}\n\n// src/api.ts\n\n\n\n// src/debug.ts\nvar debugIsActive = false;\nvar _a, _b;\ntry {\n  if (((_a = process.env.DEBUG) == null ? void 0 : _a.includes(\"blob\")) || ((_b = process.env.NEXT_PUBLIC_DEBUG) == null ? void 0 : _b.includes(\"blob\"))) {\n    debugIsActive = true;\n  }\n} catch (error) {\n}\nfunction debug(message, ...args) {\n  if (debugIsActive) {\n    console.debug(`vercel-blob: ${message}`, ...args);\n  }\n}\n\n// src/api.ts\nvar BlobAccessError = class extends BlobError {\n  constructor() {\n    super(\"Access denied, please provide a valid token for this resource.\");\n  }\n};\nvar BlobStoreNotFoundError = class extends BlobError {\n  constructor() {\n    super(\"This store does not exist.\");\n  }\n};\nvar BlobStoreSuspendedError = class extends BlobError {\n  constructor() {\n    super(\"This store has been suspended.\");\n  }\n};\nvar BlobUnknownError = class extends BlobError {\n  constructor() {\n    super(\"Unknown error, please visit https://vercel.com/help.\");\n  }\n};\nvar BlobNotFoundError = class extends BlobError {\n  constructor() {\n    super(\"The requested blob does not exist\");\n  }\n};\nvar BlobServiceNotAvailable = class extends BlobError {\n  constructor() {\n    super(\"The blob service is currently not available. Please try again.\");\n  }\n};\nvar BlobServiceRateLimited = class extends BlobError {\n  constructor(seconds) {\n    super(\n      `Too many requests please lower the number of concurrent requests ${seconds ? ` - try again in ${seconds} seconds` : \"\"}.`\n    );\n    this.retryAfter = seconds != null ? seconds : 0;\n  }\n};\nvar BlobRequestAbortedError = class extends BlobError {\n  constructor() {\n    super(\"The request was aborted.\");\n  }\n};\nvar BLOB_API_VERSION = 7;\nfunction getApiVersion() {\n  let versionOverride = null;\n  try {\n    versionOverride = process.env.VERCEL_BLOB_API_VERSION_OVERRIDE || process.env.NEXT_PUBLIC_VERCEL_BLOB_API_VERSION_OVERRIDE;\n  } catch {\n  }\n  return `${versionOverride != null ? versionOverride : BLOB_API_VERSION}`;\n}\nfunction getApiUrl(pathname = \"\") {\n  let baseUrl = null;\n  try {\n    baseUrl = process.env.VERCEL_BLOB_API_URL || process.env.NEXT_PUBLIC_VERCEL_BLOB_API_URL;\n  } catch {\n  }\n  return `${baseUrl || \"https://blob.vercel-storage.com\"}${pathname}`;\n}\nfunction getRetries() {\n  try {\n    const retries = process.env.VERCEL_BLOB_RETRIES || \"10\";\n    return parseInt(retries, 10);\n  } catch {\n    return 10;\n  }\n}\nfunction createBlobServiceRateLimited(response) {\n  const retryAfter = response.headers.get(\"retry-after\");\n  return new BlobServiceRateLimited(\n    retryAfter ? parseInt(retryAfter, 10) : void 0\n  );\n}\nasync function getBlobError(response) {\n  var _a2, _b2, _c;\n  let code;\n  let message;\n  try {\n    const data = await response.json();\n    code = (_b2 = (_a2 = data.error) == null ? void 0 : _a2.code) != null ? _b2 : \"unknown_error\";\n    message = (_c = data.error) == null ? void 0 : _c.message;\n  } catch {\n    code = \"unknown_error\";\n  }\n  let error;\n  switch (code) {\n    case \"store_suspended\":\n      error = new BlobStoreSuspendedError();\n      break;\n    case \"forbidden\":\n      error = new BlobAccessError();\n      break;\n    case \"not_found\":\n      error = new BlobNotFoundError();\n      break;\n    case \"store_not_found\":\n      error = new BlobStoreNotFoundError();\n      break;\n    case \"bad_request\":\n      error = new BlobError(message != null ? message : \"Bad request\");\n      break;\n    case \"service_unavailable\":\n      error = new BlobServiceNotAvailable();\n      break;\n    case \"rate_limited\":\n      error = createBlobServiceRateLimited(response);\n      break;\n    case \"unknown_error\":\n    case \"not_allowed\":\n    default:\n      error = new BlobUnknownError();\n      break;\n  }\n  return { code, error };\n}\nasync function requestApi(pathname, init, commandOptions) {\n  const apiVersion = getApiVersion();\n  const token = getTokenFromOptionsOrEnv(commandOptions);\n  const extraHeaders = getProxyThroughAlternativeApiHeaderFromEnv();\n  const [, , , storeId = \"\"] = token.split(\"_\");\n  const requestId = `${storeId}:${Date.now()}:${Math.random().toString(16).slice(2)}`;\n  let retryCount = 0;\n  const apiResponse = await async_retry__WEBPACK_IMPORTED_MODULE_1__(\n    async (bail) => {\n      let res;\n      try {\n        res = await (0,undici__WEBPACK_IMPORTED_MODULE_0__.fetch)(getApiUrl(pathname), {\n          ...init,\n          headers: {\n            \"x-api-blob-request-id\": requestId,\n            \"x-api-blob-request-attempt\": String(retryCount),\n            \"x-api-version\": apiVersion,\n            authorization: `Bearer ${token}`,\n            ...extraHeaders,\n            ...init.headers\n          }\n        });\n      } catch (error2) {\n        if (error2 instanceof DOMException && error2.name === \"AbortError\") {\n          bail(new BlobRequestAbortedError());\n          return;\n        }\n        throw error2;\n      }\n      if (res.ok) {\n        return res;\n      }\n      const { code, error } = await getBlobError(res);\n      if (code === \"unknown_error\" || code === \"service_unavailable\" || code === \"internal_server_error\") {\n        throw error;\n      }\n      bail(error);\n    },\n    {\n      retries: getRetries(),\n      onRetry: (error) => {\n        debug(`retrying API request to ${pathname}`, error.message);\n        retryCount = retryCount + 1;\n      }\n    }\n  );\n  if (!apiResponse) {\n    throw new BlobUnknownError();\n  }\n  return await apiResponse.json();\n}\nfunction getProxyThroughAlternativeApiHeaderFromEnv() {\n  const extraHeaders = {};\n  try {\n    if (\"VERCEL_BLOB_PROXY_THROUGH_ALTERNATIVE_API\" in process.env) {\n      extraHeaders[\"x-proxy-through-alternative-api\"] = // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- we know it's here from the if\n      process.env.VERCEL_BLOB_PROXY_THROUGH_ALTERNATIVE_API;\n    } else if (\"NEXT_PUBLIC_VERCEL_BLOB_PROXY_THROUGH_ALTERNATIVE_API\" in process.env) {\n      extraHeaders[\"x-proxy-through-alternative-api\"] = // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- we know it's here from the if\n      process.env.NEXT_PUBLIC_VERCEL_BLOB_PROXY_THROUGH_ALTERNATIVE_API;\n    }\n  } catch {\n  }\n  return extraHeaders;\n}\n\n// src/put-helpers.ts\nvar putOptionHeaderMap = {\n  cacheControlMaxAge: \"x-cache-control-max-age\",\n  addRandomSuffix: \"x-add-random-suffix\",\n  contentType: \"x-content-type\"\n};\nfunction createPutHeaders(allowedOptions, options) {\n  const headers = {};\n  if (allowedOptions.includes(\"contentType\") && options.contentType) {\n    headers[putOptionHeaderMap.contentType] = options.contentType;\n  }\n  if (allowedOptions.includes(\"addRandomSuffix\") && options.addRandomSuffix !== void 0) {\n    headers[putOptionHeaderMap.addRandomSuffix] = options.addRandomSuffix ? \"1\" : \"0\";\n  }\n  if (allowedOptions.includes(\"cacheControlMaxAge\") && options.cacheControlMaxAge !== void 0) {\n    headers[putOptionHeaderMap.cacheControlMaxAge] = options.cacheControlMaxAge.toString();\n  }\n  return headers;\n}\nasync function createPutOptions({\n  pathname,\n  options,\n  extraChecks,\n  getToken\n}) {\n  if (!pathname) {\n    throw new BlobError(\"pathname is required\");\n  }\n  if (!options) {\n    throw new BlobError(\"missing options, see usage\");\n  }\n  if (options.access !== \"public\") {\n    throw new BlobError('access must be \"public\"');\n  }\n  if (extraChecks) {\n    extraChecks(options);\n  }\n  if (getToken) {\n    options.token = await getToken(pathname, options);\n  }\n  return options;\n}\n\n// src/multipart/complete.ts\nfunction createCompleteMultipartUploadMethod({ allowedOptions, getToken, extraChecks }) {\n  return async (pathname, parts, optionsInput) => {\n    const options = await createPutOptions({\n      pathname,\n      options: optionsInput,\n      extraChecks,\n      getToken\n    });\n    const headers = createPutHeaders(allowedOptions, options);\n    return completeMultipartUpload({\n      uploadId: options.uploadId,\n      key: options.key,\n      pathname,\n      headers,\n      options,\n      parts\n    });\n  };\n}\nasync function completeMultipartUpload({\n  uploadId,\n  key,\n  pathname,\n  parts,\n  headers,\n  options\n}) {\n  try {\n    const response = await requestApi(\n      `/mpu/${pathname}`,\n      {\n        method: \"POST\",\n        headers: {\n          ...headers,\n          \"content-type\": \"application/json\",\n          \"x-mpu-action\": \"complete\",\n          \"x-mpu-upload-id\": uploadId,\n          // key can be any utf8 character so we need to encode it as HTTP headers can only be us-ascii\n          // https://www.rfc-editor.org/rfc/rfc7230#swection-3.2.4\n          \"x-mpu-key\": encodeURI(key)\n        },\n        body: JSON.stringify(parts),\n        signal: options.abortSignal\n      },\n      options\n    );\n    debug(\"mpu: complete\", response);\n    return response;\n  } catch (error) {\n    if (error instanceof TypeError && (error.message === \"Failed to fetch\" || error.message === \"fetch failed\")) {\n      throw new BlobServiceNotAvailable();\n    } else {\n      throw error;\n    }\n  }\n}\n\n// src/multipart/create.ts\nfunction createCreateMultipartUploadMethod({ allowedOptions, getToken, extraChecks }) {\n  return async (pathname, optionsInput) => {\n    const options = await createPutOptions({\n      pathname,\n      options: optionsInput,\n      extraChecks,\n      getToken\n    });\n    const headers = createPutHeaders(allowedOptions, options);\n    const createMultipartUploadResponse = await createMultipartUpload(\n      pathname,\n      headers,\n      options\n    );\n    return {\n      key: createMultipartUploadResponse.key,\n      uploadId: createMultipartUploadResponse.uploadId\n    };\n  };\n}\nasync function createMultipartUpload(pathname, headers, options) {\n  debug(\"mpu: create\", \"pathname:\", pathname);\n  try {\n    const response = await requestApi(\n      `/mpu/${pathname}`,\n      {\n        method: \"POST\",\n        headers: {\n          ...headers,\n          \"x-mpu-action\": \"create\"\n        },\n        signal: options.abortSignal\n      },\n      options\n    );\n    debug(\"mpu: create\", response);\n    return response;\n  } catch (error) {\n    if (error instanceof TypeError && (error.message === \"Failed to fetch\" || error.message === \"fetch failed\")) {\n      throw new BlobServiceNotAvailable();\n    } else {\n      throw error;\n    }\n  }\n}\n\n// src/multipart/upload.ts\n\n\nfunction createUploadPartMethod({ allowedOptions, getToken, extraChecks }) {\n  return async (pathname, body, optionsInput) => {\n    const options = await createPutOptions({\n      pathname,\n      options: optionsInput,\n      extraChecks,\n      getToken\n    });\n    const headers = createPutHeaders(allowedOptions, options);\n    if ((0,is_plain_object__WEBPACK_IMPORTED_MODULE_3__.isPlainObject)(body)) {\n      throw new BlobError(\n        \"Body must be a string, buffer or stream. You sent a plain JavaScript object, double check what you're trying to upload.\"\n      );\n    }\n    const result = await uploadPart({\n      uploadId: options.uploadId,\n      key: options.key,\n      pathname,\n      part: { blob: body, partNumber: options.partNumber },\n      headers,\n      options\n    });\n    return {\n      etag: result.etag,\n      partNumber: options.partNumber\n    };\n  };\n}\nasync function uploadPart({\n  uploadId,\n  key,\n  pathname,\n  headers,\n  options,\n  internalAbortController = new AbortController(),\n  part\n}) {\n  var _a2, _b2, _c;\n  const responsePromise = requestApi(\n    `/mpu/${pathname}`,\n    {\n      signal: internalAbortController.signal,\n      method: \"POST\",\n      headers: {\n        ...headers,\n        \"x-mpu-action\": \"upload\",\n        \"x-mpu-key\": encodeURI(key),\n        \"x-mpu-upload-id\": uploadId,\n        \"x-mpu-part-number\": part.partNumber.toString()\n      },\n      // weird things between undici types and native fetch types\n      body: part.blob,\n      // required in order to stream some body types to Cloudflare\n      // currently only supported in Node.js, we may have to feature detect this\n      // note: this doesn't send a content-length to the server\n      duplex: \"half\"\n    },\n    options\n  );\n  function handleAbort() {\n    internalAbortController.abort();\n  }\n  if ((_a2 = options.abortSignal) == null ? void 0 : _a2.aborted) {\n    handleAbort();\n  } else {\n    (_b2 = options.abortSignal) == null ? void 0 : _b2.addEventListener(\"abort\", handleAbort);\n  }\n  const response = await responsePromise;\n  (_c = options.abortSignal) == null ? void 0 : _c.removeEventListener(\"abort\", handleAbort);\n  return response;\n}\nvar maxConcurrentUploads = typeof window !== \"undefined\" ? 6 : 8;\nvar partSizeInBytes = 8 * 1024 * 1024;\nvar maxBytesInMemory = maxConcurrentUploads * partSizeInBytes * 2;\nfunction uploadAllParts({\n  uploadId,\n  key,\n  pathname,\n  stream,\n  headers,\n  options\n}) {\n  debug(\"mpu: upload init\", \"key:\", key);\n  const internalAbortController = new AbortController();\n  return new Promise((resolve, reject) => {\n    const partsToUpload = [];\n    const completedParts = [];\n    const reader = stream.getReader();\n    let activeUploads = 0;\n    let reading = false;\n    let currentPartNumber = 1;\n    let rejected = false;\n    let currentBytesInMemory = 0;\n    let doneReading = false;\n    let bytesSent = 0;\n    let arrayBuffers = [];\n    let currentPartBytesRead = 0;\n    read().catch(cancel);\n    async function read() {\n      debug(\n        \"mpu: upload read start\",\n        \"activeUploads:\",\n        activeUploads,\n        \"currentBytesInMemory:\",\n        `${bytes__WEBPACK_IMPORTED_MODULE_2__(currentBytesInMemory)}/${bytes__WEBPACK_IMPORTED_MODULE_2__(maxBytesInMemory)}`,\n        \"bytesSent:\",\n        bytes__WEBPACK_IMPORTED_MODULE_2__(bytesSent)\n      );\n      reading = true;\n      while (currentBytesInMemory < maxBytesInMemory && !rejected) {\n        try {\n          const { value, done } = await reader.read();\n          if (done) {\n            doneReading = true;\n            debug(\"mpu: upload read consumed the whole stream\");\n            if (arrayBuffers.length > 0) {\n              partsToUpload.push({\n                partNumber: currentPartNumber++,\n                blob: new Blob(arrayBuffers, {\n                  type: \"application/octet-stream\"\n                })\n              });\n              sendParts();\n            }\n            reading = false;\n            return;\n          }\n          currentBytesInMemory += value.byteLength;\n          let valueOffset = 0;\n          while (valueOffset < value.byteLength) {\n            const remainingPartSize = partSizeInBytes - currentPartBytesRead;\n            const endOffset = Math.min(\n              valueOffset + remainingPartSize,\n              value.byteLength\n            );\n            const chunk = value.slice(valueOffset, endOffset);\n            arrayBuffers.push(chunk);\n            currentPartBytesRead += chunk.byteLength;\n            valueOffset = endOffset;\n            if (currentPartBytesRead === partSizeInBytes) {\n              partsToUpload.push({\n                partNumber: currentPartNumber++,\n                blob: new Blob(arrayBuffers, {\n                  type: \"application/octet-stream\"\n                })\n              });\n              arrayBuffers = [];\n              currentPartBytesRead = 0;\n              sendParts();\n            }\n          }\n        } catch (error) {\n          cancel(error);\n        }\n      }\n      debug(\n        \"mpu: upload read end\",\n        \"activeUploads:\",\n        activeUploads,\n        \"currentBytesInMemory:\",\n        `${bytes__WEBPACK_IMPORTED_MODULE_2__(currentBytesInMemory)}/${bytes__WEBPACK_IMPORTED_MODULE_2__(maxBytesInMemory)}`,\n        \"bytesSent:\",\n        bytes__WEBPACK_IMPORTED_MODULE_2__(bytesSent)\n      );\n      reading = false;\n    }\n    async function sendPart(part) {\n      activeUploads++;\n      debug(\n        \"mpu: upload send part start\",\n        \"partNumber:\",\n        part.partNumber,\n        \"size:\",\n        part.blob.size,\n        \"activeUploads:\",\n        activeUploads,\n        \"currentBytesInMemory:\",\n        `${bytes__WEBPACK_IMPORTED_MODULE_2__(currentBytesInMemory)}/${bytes__WEBPACK_IMPORTED_MODULE_2__(maxBytesInMemory)}`,\n        \"bytesSent:\",\n        bytes__WEBPACK_IMPORTED_MODULE_2__(bytesSent)\n      );\n      try {\n        const completedPart = await uploadPart({\n          uploadId,\n          key,\n          pathname,\n          headers,\n          options,\n          internalAbortController,\n          part\n        });\n        debug(\n          \"mpu: upload send part end\",\n          \"partNumber:\",\n          part.partNumber,\n          \"activeUploads\",\n          activeUploads,\n          \"currentBytesInMemory:\",\n          `${bytes__WEBPACK_IMPORTED_MODULE_2__(currentBytesInMemory)}/${bytes__WEBPACK_IMPORTED_MODULE_2__(maxBytesInMemory)}`,\n          \"bytesSent:\",\n          bytes__WEBPACK_IMPORTED_MODULE_2__(bytesSent)\n        );\n        if (rejected) {\n          return;\n        }\n        completedParts.push({\n          partNumber: part.partNumber,\n          etag: completedPart.etag\n        });\n        currentBytesInMemory -= part.blob.size;\n        activeUploads--;\n        bytesSent += part.blob.size;\n        if (partsToUpload.length > 0) {\n          sendParts();\n        }\n        if (doneReading) {\n          if (activeUploads === 0) {\n            reader.releaseLock();\n            resolve(completedParts);\n          }\n          return;\n        }\n        if (!reading) {\n          read().catch(cancel);\n        }\n      } catch (error) {\n        cancel(error);\n      }\n    }\n    function sendParts() {\n      if (rejected) {\n        return;\n      }\n      debug(\n        \"send parts\",\n        \"activeUploads\",\n        activeUploads,\n        \"partsToUpload\",\n        partsToUpload.length\n      );\n      while (activeUploads < maxConcurrentUploads && partsToUpload.length > 0) {\n        const partToSend = partsToUpload.shift();\n        if (partToSend) {\n          void sendPart(partToSend);\n        }\n      }\n    }\n    function cancel(error) {\n      if (rejected) {\n        return;\n      }\n      rejected = true;\n      internalAbortController.abort();\n      reader.releaseLock();\n      if (error instanceof TypeError && (error.message === \"Failed to fetch\" || error.message === \"fetch failed\")) {\n        reject(new BlobServiceNotAvailable());\n      } else {\n        reject(error);\n      }\n    }\n  });\n}\n\n// src/put.ts\n\n\n// src/multipart/helpers.ts\n\n\nfunction toReadableStream(value) {\n  if (value instanceof ReadableStream) {\n    return value;\n  }\n  if (value instanceof Blob) {\n    return value.stream();\n  }\n  if (isNodeJsReadableStream(value)) {\n    return stream__WEBPACK_IMPORTED_MODULE_4__.Readable.toWeb(value);\n  }\n  let streamValue;\n  if (value instanceof ArrayBuffer) {\n    streamValue = value;\n  } else if (isNodeJsBufferOrString(value)) {\n    streamValue = value.buffer;\n  } else {\n    streamValue = stringToUint8Array(value);\n  }\n  return new ReadableStream({\n    start(controller) {\n      controller.enqueue(streamValue);\n      controller.close();\n    }\n  });\n}\nfunction isNodeJsReadableStream(value) {\n  return typeof value === \"object\" && typeof value.pipe === \"function\" && value.readable && typeof value._read === \"function\" && // @ts-expect-error _readableState does exists on Readable\n  typeof value._readableState === \"object\";\n}\nfunction stringToUint8Array(s) {\n  const enc = new TextEncoder();\n  return enc.encode(s);\n}\nfunction isNodeJsBufferOrString(input) {\n  return is_buffer__WEBPACK_IMPORTED_MODULE_5__(input);\n}\n\n// src/multipart/uncontrolled.ts\nasync function uncontrolledMultipartUpload(pathname, body, headers, options) {\n  debug(\"mpu: init\", \"pathname:\", pathname, \"headers:\", headers);\n  const stream = toReadableStream(body);\n  const createMultipartUploadResponse = await createMultipartUpload(\n    pathname,\n    headers,\n    options\n  );\n  const parts = await uploadAllParts({\n    uploadId: createMultipartUploadResponse.uploadId,\n    key: createMultipartUploadResponse.key,\n    pathname,\n    stream,\n    headers,\n    options\n  });\n  const blob = await completeMultipartUpload({\n    uploadId: createMultipartUploadResponse.uploadId,\n    key: createMultipartUploadResponse.key,\n    pathname,\n    parts,\n    headers,\n    options\n  });\n  return blob;\n}\n\n// src/put.ts\nfunction createPutMethod({\n  allowedOptions,\n  getToken,\n  extraChecks\n}) {\n  return async function put(pathname, bodyOrOptions, optionsInput) {\n    const isFolderCreation = pathname.endsWith(\"/\");\n    if (!bodyOrOptions && !isFolderCreation) {\n      throw new BlobError(\"body is required\");\n    }\n    if (bodyOrOptions && optionsInput && isFolderCreation) {\n      throw new BlobError(\"body is not allowed for creating empty folders\");\n    }\n    const body = isFolderCreation ? void 0 : bodyOrOptions;\n    if (body !== void 0 && (0,is_plain_object__WEBPACK_IMPORTED_MODULE_3__.isPlainObject)(body)) {\n      throw new BlobError(\n        \"Body must be a string, buffer or stream. You sent a plain JavaScript object, double check what you're trying to upload.\"\n      );\n    }\n    const options = await createPutOptions({\n      pathname,\n      // when no body is required (for folder creations) options are the second argument\n      options: isFolderCreation ? bodyOrOptions : optionsInput,\n      extraChecks,\n      getToken\n    });\n    const headers = createPutHeaders(allowedOptions, options);\n    if (options.multipart === true && body) {\n      return uncontrolledMultipartUpload(pathname, body, headers, options);\n    }\n    const response = await requestApi(\n      `/${pathname}`,\n      {\n        method: \"PUT\",\n        body,\n        headers,\n        // required in order to stream some body types to Cloudflare\n        // currently only supported in Node.js, we may have to feature detect this\n        // note: this doesn't send a content-length to the server\n        duplex: \"half\",\n        signal: options.abortSignal\n      },\n      options\n    );\n    return {\n      url: response.url,\n      downloadUrl: response.downloadUrl,\n      pathname: response.pathname,\n      contentType: response.contentType,\n      contentDisposition: response.contentDisposition\n    };\n  };\n}\n\n// src/multipart/create-uploader.ts\n\nfunction createCreateMultipartUploaderMethod({ allowedOptions, getToken, extraChecks }) {\n  return async (pathname, optionsInput) => {\n    const options = await createPutOptions({\n      pathname,\n      options: optionsInput,\n      extraChecks,\n      getToken\n    });\n    const headers = createPutHeaders(allowedOptions, options);\n    const createMultipartUploadResponse = await createMultipartUpload(\n      pathname,\n      headers,\n      options\n    );\n    return {\n      key: createMultipartUploadResponse.key,\n      uploadId: createMultipartUploadResponse.uploadId,\n      async uploadPart(partNumber, body) {\n        if ((0,is_plain_object__WEBPACK_IMPORTED_MODULE_3__.isPlainObject)(body)) {\n          throw new BlobError(\n            \"Body must be a string, buffer or stream. You sent a plain JavaScript object, double check what you're trying to upload.\"\n          );\n        }\n        const result = await uploadPart({\n          uploadId: createMultipartUploadResponse.uploadId,\n          key: createMultipartUploadResponse.key,\n          pathname,\n          part: { partNumber, blob: body },\n          headers,\n          options\n        });\n        return {\n          etag: result.etag,\n          partNumber\n        };\n      },\n      async complete(parts) {\n        return completeMultipartUpload({\n          uploadId: createMultipartUploadResponse.uploadId,\n          key: createMultipartUploadResponse.key,\n          pathname,\n          parts,\n          headers,\n          options\n        });\n      }\n    };\n  };\n}\n\n\n//# sourceMappingURL=chunk-QRRHJ574.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@vercel/blob/dist/chunk-QRRHJ574.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@vercel/blob/dist/client.js":
/*!**************************************************!*\
  !*** ./node_modules/@vercel/blob/dist/client.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   completeMultipartUpload: () => (/* binding */ completeMultipartUpload),\n/* harmony export */   createMultipartUpload: () => (/* binding */ createMultipartUpload),\n/* harmony export */   createMultipartUploader: () => (/* binding */ createMultipartUploader),\n/* harmony export */   generateClientTokenFromReadWriteToken: () => (/* binding */ generateClientTokenFromReadWriteToken),\n/* harmony export */   getPayloadFromClientToken: () => (/* binding */ getPayloadFromClientToken),\n/* harmony export */   handleUpload: () => (/* binding */ handleUpload),\n/* harmony export */   put: () => (/* binding */ put),\n/* harmony export */   upload: () => (/* binding */ upload),\n/* harmony export */   uploadPart: () => (/* binding */ uploadPart)\n/* harmony export */ });\n/* harmony import */ var _chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-QRRHJ574.js */ \"(rsc)/./node_modules/@vercel/blob/dist/chunk-QRRHJ574.js\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var undici__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! undici */ \"undici\");\n\n\n// src/client.ts\n\n\nfunction createPutExtraChecks(methodName) {\n  return function extraChecks(options) {\n    if (typeof window === \"undefined\") {\n      throw new _chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.BlobError(\n        `${methodName} must be called from a client environment`\n      );\n    }\n    if (!options.token.startsWith(\"vercel_blob_client_\")) {\n      throw new _chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.BlobError(`${methodName} must be called with a client token`);\n    }\n    if (\n      // @ts-expect-error -- Runtime check for DX.\n      options.addRandomSuffix !== void 0 || // @ts-expect-error -- Runtime check for DX.\n      options.cacheControlMaxAge !== void 0\n    ) {\n      throw new _chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.BlobError(\n        `${methodName} doesn't allow addRandomSuffix and cacheControlMaxAge. Configure these options at the server side when generating client tokens.`\n      );\n    }\n  };\n}\nvar put = (0,_chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.createPutMethod)({\n  allowedOptions: [\"contentType\"],\n  extraChecks: createPutExtraChecks(\"client/`put`\")\n});\nvar createMultipartUpload = (0,_chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.createCreateMultipartUploadMethod)({\n  allowedOptions: [\"contentType\"],\n  extraChecks: createPutExtraChecks(\"client/`createMultipartUpload`\")\n});\nvar createMultipartUploader = (0,_chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.createCreateMultipartUploaderMethod)(\n  {\n    allowedOptions: [\"contentType\"],\n    extraChecks: createPutExtraChecks(\"client/`createMultipartUpload`\")\n  }\n);\nvar uploadPart = (0,_chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.createUploadPartMethod)({\n  allowedOptions: [\"contentType\"],\n  extraChecks: createPutExtraChecks(\"client/`multipartUpload`\")\n});\nvar completeMultipartUpload = (0,_chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.createCompleteMultipartUploadMethod)(\n  {\n    allowedOptions: [\"contentType\"],\n    extraChecks: createPutExtraChecks(\"client/`completeMultipartUpload`\")\n  }\n);\nvar upload = (0,_chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.createPutMethod)({\n  allowedOptions: [\"contentType\"],\n  extraChecks(options) {\n    if (typeof window === \"undefined\") {\n      throw new _chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.BlobError(\n        \"client/`upload` must be called from a client environment\"\n      );\n    }\n    if (options.handleUploadUrl === void 0) {\n      throw new _chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.BlobError(\n        \"client/`upload` requires the 'handleUploadUrl' parameter\"\n      );\n    }\n    if (\n      // @ts-expect-error -- Runtime check for DX.\n      options.addRandomSuffix !== void 0 || // @ts-expect-error -- Runtime check for DX.\n      options.cacheControlMaxAge !== void 0\n    ) {\n      throw new _chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.BlobError(\n        \"client/`upload` doesn't allow addRandomSuffix and cacheControlMaxAge. Configure these options at the server side when generating client tokens.\"\n      );\n    }\n  },\n  async getToken(pathname, options) {\n    var _a, _b;\n    return retrieveClientToken({\n      handleUploadUrl: options.handleUploadUrl,\n      pathname,\n      clientPayload: (_a = options.clientPayload) != null ? _a : null,\n      multipart: (_b = options.multipart) != null ? _b : false\n    });\n  }\n});\nasync function importKey(token) {\n  return globalThis.crypto.subtle.importKey(\n    \"raw\",\n    new TextEncoder().encode(token),\n    { name: \"HMAC\", hash: \"SHA-256\" },\n    false,\n    [\"sign\", \"verify\"]\n  );\n}\nasync function signPayload(payload, token) {\n  if (!globalThis.crypto) {\n    return crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac(\"sha256\", token).update(payload).digest(\"hex\");\n  }\n  const signature = await globalThis.crypto.subtle.sign(\n    \"HMAC\",\n    await importKey(token),\n    new TextEncoder().encode(payload)\n  );\n  return Buffer.from(new Uint8Array(signature)).toString(\"hex\");\n}\nasync function verifyCallbackSignature({\n  token,\n  signature,\n  body\n}) {\n  const secret = token;\n  if (!globalThis.crypto) {\n    const digest = crypto__WEBPACK_IMPORTED_MODULE_0__.createHmac(\"sha256\", secret).update(body).digest(\"hex\");\n    const digestBuffer = Buffer.from(digest);\n    const signatureBuffer = Buffer.from(signature);\n    return digestBuffer.length === signatureBuffer.length && crypto__WEBPACK_IMPORTED_MODULE_0__.timingSafeEqual(digestBuffer, signatureBuffer);\n  }\n  const verified = await globalThis.crypto.subtle.verify(\n    \"HMAC\",\n    await importKey(token),\n    hexToArrayByte(signature),\n    new TextEncoder().encode(body)\n  );\n  return verified;\n}\nfunction hexToArrayByte(input) {\n  if (input.length % 2 !== 0) {\n    throw new RangeError(\"Expected string to be an even number of characters\");\n  }\n  const view = new Uint8Array(input.length / 2);\n  for (let i = 0; i < input.length; i += 2) {\n    view[i / 2] = parseInt(input.substring(i, i + 2), 16);\n  }\n  return Buffer.from(view);\n}\nfunction getPayloadFromClientToken(clientToken) {\n  const [, , , , encodedToken] = clientToken.split(\"_\");\n  const encodedPayload = Buffer.from(encodedToken != null ? encodedToken : \"\", \"base64\").toString().split(\".\")[1];\n  const decodedPayload = Buffer.from(encodedPayload != null ? encodedPayload : \"\", \"base64\").toString();\n  return JSON.parse(decodedPayload);\n}\nvar EventTypes = {\n  generateClientToken: \"blob.generate-client-token\",\n  uploadCompleted: \"blob.upload-completed\"\n};\nasync function handleUpload({\n  token,\n  request,\n  body,\n  onBeforeGenerateToken,\n  onUploadCompleted\n}) {\n  var _a, _b, _c, _d;\n  const resolvedToken = (0,_chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.getTokenFromOptionsOrEnv)({ token });\n  const type = body.type;\n  switch (type) {\n    case \"blob.generate-client-token\": {\n      const { pathname, callbackUrl, clientPayload, multipart } = body.payload;\n      const payload = await onBeforeGenerateToken(\n        pathname,\n        clientPayload,\n        multipart\n      );\n      const tokenPayload = (_a = payload.tokenPayload) != null ? _a : clientPayload;\n      const oneHourInSeconds = 60 * 60;\n      const now = /* @__PURE__ */ new Date();\n      const validUntil = (_b = payload.validUntil) != null ? _b : now.setSeconds(now.getSeconds() + oneHourInSeconds);\n      return {\n        type,\n        clientToken: await generateClientTokenFromReadWriteToken({\n          ...payload,\n          token: resolvedToken,\n          pathname,\n          onUploadCompleted: {\n            callbackUrl,\n            tokenPayload\n          },\n          validUntil\n        })\n      };\n    }\n    case \"blob.upload-completed\": {\n      const signatureHeader = \"x-vercel-signature\";\n      const signature = \"credentials\" in request ? (_c = request.headers.get(signatureHeader)) != null ? _c : \"\" : (_d = request.headers[signatureHeader]) != null ? _d : \"\";\n      if (!signature) {\n        throw new _chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.BlobError(\"Missing callback signature\");\n      }\n      const isVerified = await verifyCallbackSignature({\n        token: resolvedToken,\n        signature,\n        body: JSON.stringify(body)\n      });\n      if (!isVerified) {\n        throw new _chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.BlobError(\"Invalid callback signature\");\n      }\n      await onUploadCompleted(body.payload);\n      return { type, response: \"ok\" };\n    }\n    default:\n      throw new _chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.BlobError(\"Invalid event type\");\n  }\n}\nasync function retrieveClientToken(options) {\n  const { handleUploadUrl, pathname } = options;\n  const url = isAbsoluteUrl(handleUploadUrl) ? handleUploadUrl : toAbsoluteUrl(handleUploadUrl);\n  const event = {\n    type: EventTypes.generateClientToken,\n    payload: {\n      pathname,\n      callbackUrl: url,\n      clientPayload: options.clientPayload,\n      multipart: options.multipart\n    }\n  };\n  const res = await (0,undici__WEBPACK_IMPORTED_MODULE_1__.fetch)(url, {\n    method: \"POST\",\n    body: JSON.stringify(event),\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    signal: options.abortSignal\n  });\n  if (!res.ok) {\n    throw new _chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.BlobError(\"Failed to  retrieve the client token\");\n  }\n  try {\n    const { clientToken } = await res.json();\n    return clientToken;\n  } catch (e) {\n    throw new _chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.BlobError(\"Failed to retrieve the client token\");\n  }\n}\nfunction toAbsoluteUrl(url) {\n  return new URL(url, window.location.href).href;\n}\nfunction isAbsoluteUrl(url) {\n  try {\n    return Boolean(new URL(url));\n  } catch (e) {\n    return false;\n  }\n}\nasync function generateClientTokenFromReadWriteToken({\n  token,\n  ...argsWithoutToken\n}) {\n  var _a;\n  if (typeof window !== \"undefined\") {\n    throw new _chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.BlobError(\n      '\"generateClientTokenFromReadWriteToken\" must be called from a server environment'\n    );\n  }\n  const timestamp = /* @__PURE__ */ new Date();\n  timestamp.setSeconds(timestamp.getSeconds() + 30);\n  const readWriteToken = (0,_chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.getTokenFromOptionsOrEnv)({ token });\n  const [, , , storeId = null] = readWriteToken.split(\"_\");\n  if (!storeId) {\n    throw new _chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.BlobError(\n      token ? \"Invalid `token` parameter\" : \"Invalid `BLOB_READ_WRITE_TOKEN`\"\n    );\n  }\n  const payload = Buffer.from(\n    JSON.stringify({\n      ...argsWithoutToken,\n      validUntil: (_a = argsWithoutToken.validUntil) != null ? _a : timestamp.getTime()\n    })\n  ).toString(\"base64\");\n  const securedKey = await signPayload(payload, readWriteToken);\n  if (!securedKey) {\n    throw new _chunk_QRRHJ574_js__WEBPACK_IMPORTED_MODULE_2__.BlobError(\"Unable to sign client token\");\n  }\n  return `vercel_blob_client_${storeId}_${Buffer.from(\n    `${securedKey}.${payload}`\n  ).toString(\"base64\")}`;\n}\n\n//# sourceMappingURL=client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@vercel/blob/dist/client.js\n");

/***/ })

};
;